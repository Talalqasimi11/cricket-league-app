{
  "name": "Cricket League App Test Suite",
  "description": "Comprehensive testing for Cricket League App - Flutter frontend with Node.js/Express backend",
  "version": "1.0.0",
  "baseUrl": "http://localhost:5000",
  "timeout": 30000,
  "retries": 2,
  "parallel": true,
  "maxConcurrency": 5,
  "environments": {
    "development": {
      "baseUrl": "http://localhost:5000",
      "corsOrigins": ["http://localhost:3000", "http://localhost:5000", "http://127.0.0.1:5000", "http://10.0.2.2:5000"]
    },
    "android_emulator": {
      "baseUrl": "http://10.0.2.2:5000",
      "corsOrigins": ["http://10.0.2.2:5000"]
    }
  },
  "testSuites": [
    {
      "name": "Authentication Tests",
      "description": "Test user registration, login, password reset, and account management",
      "tests": [
        {
          "name": "Health Check",
          "description": "Verify backend is running and database is connected",
          "method": "GET",
          "endpoint": "/health",
          "expectedStatus": 200,
          "expectedResponse": {
            "status": "ok",
            "db": "up"
          }
        },
        {
          "name": "Register New Captain - Valid Data",
          "description": "Test successful captain registration with valid data",
          "method": "POST",
          "endpoint": "/api/auth/register",
          "headers": {
            "Content-Type": "application/json"
          },
          "body": {
            "phone_number": "+1234567890",
            "password": "password123",
            "team_name": "Test Team",
            "team_location": "Test City",
            "captain_name": "Test Captain",
            "owner_name": "Test Owner",
            "team_logo_url": "https://example.com/logo.png"
          },
          "expectedStatus": 201,
          "expectedResponse": {
            "message": "Owner and team registered successfully"
          }
        },
        {
          "name": "Register Captain - Duplicate Phone",
          "description": "Test registration with existing phone number",
          "method": "POST",
          "endpoint": "/api/auth/register",
          "headers": {
            "Content-Type": "application/json"
          },
          "body": {
            "phone_number": "+1234567890",
            "password": "password123",
            "team_name": "Another Team",
            "team_location": "Another City"
          },
          "expectedStatus": 409,
          "expectedResponse": {
            "error": "Phone number already registered"
          }
        },
        {
          "name": "Register Captain - Invalid Phone",
          "description": "Test registration with invalid phone number format",
          "method": "POST",
          "endpoint": "/api/auth/register",
          "headers": {
            "Content-Type": "application/json"
          },
          "body": {
            "phone_number": "invalid",
            "password": "password123",
            "team_name": "Test Team",
            "team_location": "Test City"
          },
          "expectedStatus": 400,
          "expectedResponse": {
            "error": "Invalid phone number format"
          }
        },
        {
          "name": "Register Captain - Weak Password",
          "description": "Test registration with password less than 8 characters",
          "method": "POST",
          "endpoint": "/api/auth/register",
          "headers": {
            "Content-Type": "application/json"
          },
          "body": {
            "phone_number": "+1234567891",
            "password": "123",
            "team_name": "Test Team",
            "team_location": "Test City"
          },
          "expectedStatus": 400,
          "expectedResponse": {
            "error": "Password must be at least 8 characters"
          }
        },
        {
          "name": "Login Captain - Valid Credentials",
          "description": "Test successful login with valid credentials",
          "method": "POST",
          "endpoint": "/api/auth/login",
          "headers": {
            "Content-Type": "application/json"
          },
          "body": {
            "phone_number": "+1234567890",
            "password": "password123"
          },
          "expectedStatus": 200,
          "expectedResponse": {
            "message": "Login successful",
            "token": "string",
            "refresh_token": "string",
            "user": {
              "id": "number",
              "phone_number": "+1234567890"
            }
          },
          "storeResponse": {
            "accessToken": "token",
            "refreshToken": "refresh_token",
            "userId": "user.id"
          }
        },
        {
          "name": "Login Captain - Invalid Credentials",
          "description": "Test login with invalid credentials",
          "method": "POST",
          "endpoint": "/api/auth/login",
          "headers": {
            "Content-Type": "application/json"
          },
          "body": {
            "phone_number": "+1234567890",
            "password": "wrongpassword"
          },
          "expectedStatus": 401,
          "expectedResponse": {
            "error": "Invalid credentials"
          }
        },
        {
          "name": "Login Captain - Non-existent User",
          "description": "Test login with non-existent phone number",
          "method": "POST",
          "endpoint": "/api/auth/login",
          "headers": {
            "Content-Type": "application/json"
          },
          "body": {
            "phone_number": "+9999999999",
            "password": "password123"
          },
          "expectedStatus": 404,
          "expectedResponse": {
            "error": "User not found"
          }
        },
        {
          "name": "Refresh Token - Valid Token",
          "description": "Test token refresh with valid refresh token",
          "method": "POST",
          "endpoint": "/api/auth/refresh",
          "headers": {
            "Content-Type": "application/json"
          },
          "body": {
            "refresh_token": "{{refreshToken}}"
          },
          "expectedStatus": 200,
          "expectedResponse": {
            "token": "string"
          }
        },
        {
          "name": "Logout - Valid Token",
          "description": "Test logout with valid refresh token",
          "method": "POST",
          "endpoint": "/api/auth/logout",
          "headers": {
            "Content-Type": "application/json"
          },
          "body": {
            "refresh_token": "{{refreshToken}}"
          },
          "expectedStatus": 200,
          "expectedResponse": {
            "message": "Logged out"
          }
        }
      ]
    },
    {
      "name": "Team Management Tests",
      "description": "Test team operations and player management",
      "tests": [
        {
          "name": "Get All Teams - Public",
          "description": "Test getting list of all teams (public endpoint)",
          "method": "GET",
          "endpoint": "/api/teams/all",
          "expectedStatus": 200,
          "expectedResponse": "array"
        },
        {
          "name": "Get My Team - Authenticated",
          "description": "Test getting authenticated user's team",
          "method": "GET",
          "endpoint": "/api/teams/my-team",
          "headers": {
            "Authorization": "Bearer {{accessToken}}"
          },
          "expectedStatus": 200,
          "expectedResponse": {
            "id": "number",
            "team_name": "string",
            "team_location": "string",
            "owner_id": "number"
          }
        },
        {
          "name": "Get My Team - Unauthenticated",
          "description": "Test getting team without authentication",
          "method": "GET",
          "endpoint": "/api/teams/my-team",
          "expectedStatus": 401,
          "expectedResponse": {
            "error": "Unauthorized"
          }
        },
        {
          "name": "Update My Team - Valid Data",
          "description": "Test updating team information",
          "method": "PUT",
          "endpoint": "/api/teams/update",
          "headers": {
            "Authorization": "Bearer {{accessToken}}",
            "Content-Type": "application/json"
          },
          "body": {
            "team_name": "Updated Team Name",
            "team_location": "Updated City",
            "team_logo_url": "https://example.com/new-logo.png"
          },
          "expectedStatus": 200,
          "expectedResponse": {
            "message": "Team updated successfully"
          }
        },
        {
          "name": "Add Player - Valid Data",
          "description": "Test adding a new player to the team",
          "method": "POST",
          "endpoint": "/api/players/add",
          "headers": {
            "Authorization": "Bearer {{accessToken}}",
            "Content-Type": "application/json"
          },
          "body": {
            "player_name": "Test Player",
            "player_role": "batsman",
            "player_image_url": "https://example.com/player.jpg"
          },
          "expectedStatus": 201,
          "expectedResponse": {
            "message": "Player added successfully"
          }
        },
        {
          "name": "Get My Players - Authenticated",
          "description": "Test getting authenticated user's players",
          "method": "GET",
          "endpoint": "/api/players/my-players",
          "headers": {
            "Authorization": "Bearer {{accessToken}}"
          },
          "expectedStatus": 200,
          "expectedResponse": "array"
        },
        {
          "name": "Update Player - Valid Data",
          "description": "Test updating player information",
          "method": "PUT",
          "endpoint": "/api/players/update",
          "headers": {
            "Authorization": "Bearer {{accessToken}}",
            "Content-Type": "application/json"
          },
          "body": {
            "player_id": 1,
            "player_name": "Updated Player Name",
            "player_role": "bowler"
          },
          "expectedStatus": 200,
          "expectedResponse": {
            "message": "Player updated successfully"
          }
        }
      ]
    },
    {
      "name": "Tournament Management Tests",
      "description": "Test tournament creation, management, and match scheduling",
      "tests": [
        {
          "name": "Create Tournament - Valid Data",
          "description": "Test creating a new tournament",
          "method": "POST",
          "endpoint": "/api/tournaments/create",
          "headers": {
            "Authorization": "Bearer {{accessToken}}",
            "Content-Type": "application/json"
          },
          "body": {
            "tournament_name": "Test Tournament",
            "location": "Test Stadium",
            "start_date": "2024-12-01"
          },
          "expectedStatus": 201,
          "expectedResponse": {
            "message": "Tournament created successfully"
          },
          "storeResponse": {
            "tournamentId": "id"
          }
        },
        {
          "name": "Get Tournaments - Public",
          "description": "Test getting list of all tournaments",
          "method": "GET",
          "endpoint": "/api/tournaments/",
          "expectedStatus": 200,
          "expectedResponse": "array"
        },
        {
          "name": "Create Tournament Match - Valid Data",
          "description": "Test creating a match in a tournament",
          "method": "POST",
          "endpoint": "/api/tournament-matches/create",
          "headers": {
            "Authorization": "Bearer {{accessToken}}",
            "Content-Type": "application/json"
          },
          "body": {
            "tournament_id": "{{tournamentId}}",
            "team1_id": 1,
            "team2_id": 2,
            "overs": 20,
            "match_datetime": "2024-12-01T10:00:00Z"
          },
          "expectedStatus": 201,
          "expectedResponse": {
            "message": "Match created successfully"
          },
          "storeResponse": {
            "matchId": "id"
          }
        },
        {
          "name": "Get Tournament Matches",
          "description": "Test getting matches for a specific tournament",
          "method": "GET",
          "endpoint": "/api/tournament-matches/{{tournamentId}}",
          "expectedStatus": 200,
          "expectedResponse": "array"
        },
        {
          "name": "Start Tournament Match",
          "description": "Test starting a tournament match",
          "method": "PUT",
          "endpoint": "/api/tournament-matches/start/{{matchId}}",
          "headers": {
            "Authorization": "Bearer {{accessToken}}"
          },
          "expectedStatus": 200,
          "expectedResponse": {
            "message": "Match started successfully"
          }
        }
      ]
    },
    {
      "name": "Live Scoring Tests",
      "description": "Test live match scoring and ball-by-ball recording",
      "tests": [
        {
          "name": "Start Innings - Valid Match",
          "description": "Test starting innings for a match",
          "method": "POST",
          "endpoint": "/api/live/start-innings",
          "headers": {
            "Authorization": "Bearer {{accessToken}}",
            "Content-Type": "application/json"
          },
          "body": {
            "match_id": "{{matchId}}",
            "batting_team_id": 1,
            "bowling_team_id": 2,
            "overs": 20
          },
          "expectedStatus": 201,
          "expectedResponse": {
            "message": "Innings started successfully"
          },
          "storeResponse": {
            "inningsId": "innings_id"
          }
        },
        {
          "name": "Add Ball - Valid Delivery",
          "description": "Test recording a ball delivery",
          "method": "POST",
          "endpoint": "/api/live/ball",
          "headers": {
            "Authorization": "Bearer {{accessToken}}",
            "Content-Type": "application/json"
          },
          "body": {
            "match_id": "{{matchId}}",
            "innings_id": "{{inningsId}}",
            "over_number": 1,
            "ball_number": 1,
            "striker_id": 1,
            "bowler_id": 2,
            "runs_scored": 4,
            "extras": "none",
            "wicket": false
          },
          "expectedStatus": 201,
          "expectedResponse": {
            "message": "Ball recorded successfully"
          }
        },
        {
          "name": "Add Ball - Wide Ball",
          "description": "Test recording a wide ball",
          "method": "POST",
          "endpoint": "/api/live/ball",
          "headers": {
            "Authorization": "Bearer {{accessToken}}",
            "Content-Type": "application/json"
          },
          "body": {
            "match_id": "{{matchId}}",
            "innings_id": "{{inningsId}}",
            "over_number": 1,
            "ball_number": 2,
            "striker_id": 1,
            "bowler_id": 2,
            "runs_scored": 1,
            "extras": "wide",
            "wicket": false
          },
          "expectedStatus": 201,
          "expectedResponse": {
            "message": "Ball recorded successfully"
          }
        },
        {
          "name": "Add Ball - Wicket",
          "description": "Test recording a wicket",
          "method": "POST",
          "endpoint": "/api/live/ball",
          "headers": {
            "Authorization": "Bearer {{accessToken}}",
            "Content-Type": "application/json"
          },
          "body": {
            "match_id": "{{matchId}}",
            "innings_id": "{{inningsId}}",
            "over_number": 1,
            "ball_number": 3,
            "striker_id": 1,
            "bowler_id": 2,
            "runs_scored": 0,
            "extras": "none",
            "wicket": true,
            "dismissal_type": "bowled",
            "fielder_id": null
          },
          "expectedStatus": 201,
          "expectedResponse": {
            "message": "Ball recorded successfully"
          }
        },
        {
          "name": "Get Live Score",
          "description": "Test getting live score for a match",
          "method": "GET",
          "endpoint": "/api/live/{{matchId}}",
          "expectedStatus": 200,
          "expectedResponse": {
            "match_id": "number",
            "current_innings": "object",
            "score": "object"
          }
        },
        {
          "name": "End Innings",
          "description": "Test ending an innings",
          "method": "POST",
          "endpoint": "/api/live/end-innings",
          "headers": {
            "Authorization": "Bearer {{accessToken}}",
            "Content-Type": "application/json"
          },
          "body": {
            "match_id": "{{matchId}}",
            "innings_id": "{{inningsId}}"
          },
          "expectedStatus": 200,
          "expectedResponse": {
            "message": "Innings ended successfully"
          }
        }
      ]
    },
    {
      "name": "Statistics and Analytics Tests",
      "description": "Test player and team statistics endpoints",
      "tests": [
        {
          "name": "Get Player Stats",
          "description": "Test getting player statistics",
          "method": "GET",
          "endpoint": "/api/player-stats/1",
          "expectedStatus": 200,
          "expectedResponse": {
            "player_id": "number",
            "runs": "number",
            "matches_played": "number",
            "batting_average": "number"
          }
        },
        {
          "name": "Get Team Tournament Summary",
          "description": "Test getting team performance in tournaments",
          "method": "GET",
          "endpoint": "/api/tournament-summary/1",
          "expectedStatus": 200,
          "expectedResponse": "array"
        },
        {
          "name": "Get Ball by Ball Deliveries",
          "description": "Test getting ball-by-ball deliveries for a match",
          "method": "GET",
          "endpoint": "/api/deliveries/match/{{matchId}}",
          "expectedStatus": 200,
          "expectedResponse": "array"
        }
      ]
    },
    {
      "name": "Error Handling and Edge Cases",
      "description": "Test error handling, rate limiting, and edge cases",
      "tests": [
        {
          "name": "Rate Limit - Login Attempts",
          "description": "Test rate limiting on login endpoint",
          "method": "POST",
          "endpoint": "/api/auth/login",
          "headers": {
            "Content-Type": "application/json"
          },
          "body": {
            "phone_number": "+1234567890",
            "password": "wrongpassword"
          },
          "repeat": 15,
          "expectedStatus": 429,
          "expectedResponse": {
            "error": "Too many requests"
          }
        },
        {
          "name": "Invalid Endpoint",
          "description": "Test accessing non-existent endpoint",
          "method": "GET",
          "endpoint": "/api/nonexistent",
          "expectedStatus": 404,
          "expectedResponse": {
            "error": "Not found"
          }
        },
        {
          "name": "Malformed JSON",
          "description": "Test sending malformed JSON",
          "method": "POST",
          "endpoint": "/api/auth/login",
          "headers": {
            "Content-Type": "application/json"
          },
          "body": "invalid json",
          "expectedStatus": 400
        },
        {
          "name": "Missing Required Fields",
          "description": "Test missing required fields in registration",
          "method": "POST",
          "endpoint": "/api/auth/register",
          "headers": {
            "Content-Type": "application/json"
          },
          "body": {
            "phone_number": "+1234567892"
          },
          "expectedStatus": 400,
          "expectedResponse": {
            "error": "All fields are required"
          }
        }
      ]
    }
  ],
  "setup": {
    "preTest": [
      {
        "name": "Start Backend Server",
        "description": "Ensure backend server is running",
        "command": "cd backend && npm start",
        "waitFor": {
          "url": "http://localhost:5000/health",
          "timeout": 30000
        }
      }
    ],
    "postTest": [
      {
        "name": "Cleanup Test Data",
        "description": "Clean up test data after tests",
        "command": "mysql -u root -p cricket_league -e \"DELETE FROM users WHERE phone_number LIKE '+123456789%';\""
      }
    ]
  },
  "reporting": {
    "format": "html",
    "output": "test-results.html",
    "includeScreenshots": true,
    "includeRequestResponse": true
  }
}
