[
  {
    "projectId": "3b5100fd-536b-4d2f-a673-dae4ad815562",
    "testId": "fadaa499-6136-42ac-9261-d622f8fe42f4",
    "userId": "542874f8-8051-709a-f7f2-d04f2d7e10a0",
    "title": "TC001-register new captain with valid data",
    "description": "Test the /register endpoint to ensure a new team captain can be registered successfully with valid phone number, password, team name, and team location. Verify response status 201 and success message.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5000/api/auth\"\nTIMEOUT = 30\n\ndef test_register_new_captain_with_valid_data():\n    url = f\"{BASE_URL}/register\"\n    payload = {\n        \"phone_number\": \"+12345678901\",\n        \"password\": \"StrongPass1\",\n        \"team_name\": \"The Warriors\",\n        \"team_location\": \"New York\",\n        \"captain_name\": \"John Doe\",\n        \"owner_name\": \"Jane Doe\",\n        \"team_logo_url\": \"http://example.com/logo.png\"\n    }\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n    try:\n        response = requests.post(url, json=payload, headers=headers, timeout=TIMEOUT)\n        assert response.status_code == 201, f\"Expected status code 201, got {response.status_code}\"\n        json_response = response.json()\n        assert \"message\" in json_response, \"Response JSON does not contain 'message'\"\n        assert json_response[\"message\"].lower().find(\"success\") != -1, f\"Unexpected success message: {json_response['message']}\"\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\ntest_register_new_captain_with_valid_data()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 29, in <module>\n  File \"<string>\", line 22, in test_register_new_captain_with_valid_data\nAssertionError: Expected status code 201, got 500\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-16T12:52:45.540Z",
    "modified": "2025-10-16T12:53:26.363Z"
  },
  {
    "projectId": "3b5100fd-536b-4d2f-a673-dae4ad815562",
    "testId": "7c1d59a8-8d7c-490c-b234-e21c47baf590",
    "userId": "542874f8-8051-709a-f7f2-d04f2d7e10a0",
    "title": "TC002-login captain with correct credentials",
    "description": "Test the /login endpoint to authenticate a captain using valid phone number and password. Verify response status 200, presence of JWT access token, refresh token, and user details.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5000/api/auth\"\nTIMEOUT = 30\n\ndef test_login_captain_with_correct_credentials():\n    url = f\"{BASE_URL}/login\"\n    payload = {\n        \"phone_number\": \"1\",\n        \"password\": \"1\"\n    }\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n    try:\n        response = requests.post(url, json=payload, headers=headers, timeout=TIMEOUT)\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n    assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n    try:\n        data = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    assert \"token\" in data and isinstance(data[\"token\"], str) and data[\"token\"], \"Access token missing or invalid\"\n    assert \"refresh_token\" in data and isinstance(data[\"refresh_token\"], str) and data[\"refresh_token\"], \"Refresh token missing or invalid\"\n    assert \"user\" in data and isinstance(data[\"user\"], dict), \"User details missing or invalid\"\n    user = data[\"user\"]\n    assert \"id\" in user and isinstance(user[\"id\"], int), \"User id missing or invalid\"\n    assert \"phone_number\" in user and user[\"phone_number\"] == payload[\"phone_number\"], \"User phone number missing or does not match\"\n\ntest_login_captain_with_correct_credentials()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 33, in <module>\n  File \"<string>\", line 20, in test_login_captain_with_correct_credentials\nAssertionError: Expected status code 200, got 500\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-16T12:52:45.546Z",
    "modified": "2025-10-16T12:53:24.478Z"
  },
  {
    "projectId": "3b5100fd-536b-4d2f-a673-dae4ad815562",
    "testId": "06e2dce0-d5cb-4b46-81b4-4226b3e0adbc",
    "userId": "542874f8-8051-709a-f7f2-d04f2d7e10a0",
    "title": "TC003-refresh access token using valid refresh token",
    "description": "Test the /refresh endpoint to obtain a new access token by providing a valid refresh token. Verify response status 200 and new JWT access token in response.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5000/api/auth\"\nUSERNAME = \"+12345678901\"\nPASSWORD = \"password123\"\nTIMEOUT = 30\n\ndef test_refresh_access_token_using_valid_refresh_token():\n    login_url = f\"{BASE_URL}/login\"\n    refresh_url = f\"{BASE_URL}/refresh\"\n\n    # Step 1: Login to get refresh token\n    login_payload = {\"phone_number\": USERNAME, \"password\": PASSWORD}\n    try:\n        login_resp = requests.post(login_url, json=login_payload, timeout=TIMEOUT)\n        login_resp.raise_for_status()\n    except requests.RequestException as e:\n        assert False, f\"Login request failed: {e}\"\n\n    login_data = login_resp.json()\n    assert login_resp.status_code == 200, f\"Expected 200 for login, got {login_resp.status_code}\"\n    assert \"refresh_token\" in login_data, \"refresh_token not found in login response\"\n    refresh_token = login_data[\"refresh_token\"]\n    assert isinstance(refresh_token, str) and len(refresh_token) > 0, \"Invalid refresh_token value\"\n\n    # Step 2: Use refresh token to get new access token\n    refresh_payload = {\"refresh_token\": refresh_token}\n    try:\n        refresh_resp = requests.post(refresh_url, json=refresh_payload, timeout=TIMEOUT)\n        refresh_resp.raise_for_status()\n    except requests.RequestException as e:\n        assert False, f\"Refresh token request failed: {e}\"\n\n    refresh_data = refresh_resp.json()\n    assert refresh_resp.status_code == 200, f\"Expected 200 for refresh, got {refresh_resp.status_code}\"\n    assert \"token\" in refresh_data, \"New access token not found in refresh response\"\n    new_access_token = refresh_data[\"token\"]\n    assert isinstance(new_access_token, str) and len(new_access_token) > 0, \"Invalid new access token value\"\n\ntest_refresh_access_token_using_valid_refresh_token()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 16, in test_refresh_access_token_using_valid_refresh_token\n  File \"/var/task/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\nrequests.exceptions.HTTPError: 500 Server Error: Internal Server Error for url: http://localhost:5000/api/auth/login\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 40, in <module>\n  File \"<string>\", line 18, in test_refresh_access_token_using_valid_refresh_token\nAssertionError: Login request failed: 500 Server Error: Internal Server Error for url: http://localhost:5000/api/auth/login\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-16T12:52:45.551Z",
    "modified": "2025-10-16T12:53:47.913Z"
  },
  {
    "projectId": "3b5100fd-536b-4d2f-a673-dae4ad815562",
    "testId": "3be00b45-0b68-42c3-bacd-ce20921344b3",
    "userId": "542874f8-8051-709a-f7f2-d04f2d7e10a0",
    "title": "TC004-logout user and revoke refresh token",
    "description": "Test the /logout endpoint to revoke the refresh token and logout the user. Verify response status 200 and logout confirmation message.",
    "code": "import requests\nfrom requests.auth import HTTPBasicAuth\n\nBASE_URL = \"http://localhost:5000/api/auth\"\nTIMEOUT = 30\nUSERNAME = \"1\"\nPASSWORD = \"1\"\n\ndef test_logout_user_and_revoke_refresh_token():\n    # Login first to get tokens\n    login_url = f\"{BASE_URL}/login\"\n    login_payload = {\n        \"phone_number\": USERNAME,\n        \"password\": PASSWORD\n    }\n\n    try:\n        login_resp = requests.post(login_url, json=login_payload, timeout=TIMEOUT)\n        assert login_resp.status_code == 200, f\"Login failed with status code {login_resp.status_code}\"\n        login_data = login_resp.json()\n        assert \"token\" in login_data and login_data[\"token\"], \"Access token missing in login response\"\n        assert \"refresh_token\" in login_data and login_data[\"refresh_token\"], \"Refresh token missing in login response\"\n\n        refresh_token = login_data[\"refresh_token\"]\n\n        # Logout to revoke refresh token\n        logout_url = f\"{BASE_URL}/logout\"\n        headers = {\n            \"Authorization\": f\"Bearer {login_data['token']}\"\n        }\n        # According to PRD, logout is POST without body\n        logout_resp = requests.post(logout_url, headers=headers, timeout=TIMEOUT)\n        assert logout_resp.status_code == 200, f\"Logout failed with status code {logout_resp.status_code}\"\n        logout_data = logout_resp.json()\n        assert \"message\" in logout_data, \"Logout confirmation message missing\"\n        assert logout_data[\"message\"].lower() == \"logged out\", \"Logout confirmation message incorrect\"\n\n    except (requests.RequestException, AssertionError) as e:\n        raise AssertionError(f\"Test TC004 failed: {e}\")\n\ntest_logout_user_and_revoke_refresh_token()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 19, in test_logout_user_and_revoke_refresh_token\nAssertionError: Login failed with status code 500\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 41, in <module>\n  File \"<string>\", line 39, in test_logout_user_and_revoke_refresh_token\nAssertionError: Test TC004 failed: Login failed with status code 500\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-16T12:52:45.556Z",
    "modified": "2025-10-16T12:53:30.103Z"
  },
  {
    "projectId": "3b5100fd-536b-4d2f-a673-dae4ad815562",
    "testId": "148caa1a-202a-466b-9019-9b9bffff469b",
    "userId": "542874f8-8051-709a-f7f2-d04f2d7e10a0",
    "title": "TC005-get all teams public endpoint",
    "description": "Test the /teams/all GET endpoint to retrieve a list of all teams. Verify response status 200 and correct structure of team list including id, team name, location, matches played, matches won, and trophies.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5000/api\"\nTIMEOUT = 30\n\ndef test_get_all_teams_public_endpoint():\n    url = f\"{BASE_URL}/teams/all\"\n    try:\n        response = requests.get(url, timeout=TIMEOUT)\n    except requests.RequestException as e:\n        assert False, f\"Request to {url} failed: {e}\"\n\n    assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n\n    try:\n        teams = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    assert isinstance(teams, list), \"Response JSON is not a list\"\n\n    # Validate each team object structure\n    for team in teams:\n        assert isinstance(team, dict), \"Team item is not a JSON object\"\n        assert \"id\" in team and isinstance(team[\"id\"], int), \"Team id missing or not int\"\n        assert \"team_name\" in team and isinstance(team[\"team_name\"], str), \"Team name missing or not str\"\n        assert \"team_location\" in team and isinstance(team[\"team_location\"], str), \"Team location missing or not str\"\n        assert \"matches_played\" in team and isinstance(team[\"matches_played\"], int), \"Matches played missing or not int\"\n        assert \"matches_won\" in team and isinstance(team[\"matches_won\"], int), \"Matches won missing or not int\"\n        assert \"trophies\" in team and isinstance(team[\"trophies\"], int), \"Trophies missing or not int\"\n\ntest_get_all_teams_public_endpoint()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 32, in <module>\n  File \"<string>\", line 13, in test_get_all_teams_public_endpoint\nAssertionError: Expected status code 200, got 500\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-16T12:52:45.561Z",
    "modified": "2025-10-16T12:53:26.364Z"
  },
  {
    "projectId": "3b5100fd-536b-4d2f-a673-dae4ad815562",
    "testId": "16cbe2c6-7e8b-4c0e-906a-9ce7fc61a15a",
    "userId": "542874f8-8051-709a-f7f2-d04f2d7e10a0",
    "title": "TC006-get authenticated users team details",
    "description": "Test the /teams/my-team GET endpoint with valid JWT token to retrieve the authenticated user's team details. Verify response status 200 and correct team information including id, team name, location, and owner id.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5000\"\nAUTH_URL = f\"{BASE_URL}/api/auth/login\"\nMY_TEAM_URL = f\"{BASE_URL}/api/teams/my-team\"\n\nUSERNAME = \"1\"\nPASSWORD = \"1\"\n\ndef test_get_authenticated_users_team_details():\n    try:\n        # Step 1: Authenticate to get JWT token\n        login_payload = {\n            \"phone_number\": USERNAME,\n            \"password\": PASSWORD\n        }\n        login_resp = requests.post(AUTH_URL, json=login_payload, timeout=30)\n        assert login_resp.status_code == 200, f\"Login failed: {login_resp.text}\"\n        login_data = login_resp.json()\n\n        token = login_data.get(\"token\")\n        assert token, \"JWT token not found in login response\"\n\n        headers = {\n            \"Authorization\": f\"Bearer {token}\"\n        }\n\n        # Step 2: Get authenticated user's team details\n        team_resp = requests.get(MY_TEAM_URL, headers=headers, timeout=30)\n        assert team_resp.status_code == 200, f\"Failed to get team details: {team_resp.text}\"\n        team_data = team_resp.json()\n\n        # Validate keys and types in the response\n        assert isinstance(team_data, dict), \"Team response is not a dictionary\"\n\n        expected_keys = {\"id\", \"team_name\", \"team_location\", \"owner_id\"}\n        assert expected_keys.issubset(team_data.keys()), (\n            f\"Response missing keys: {expected_keys - set(team_data.keys())}\"\n        )\n\n        assert isinstance(team_data[\"id\"], int), \"Team 'id' is not an integer\"\n        assert isinstance(team_data[\"team_name\"], str), \"Team 'team_name' is not a string\"\n        assert isinstance(team_data[\"team_location\"], str), \"Team 'team_location' is not a string\"\n        assert isinstance(team_data[\"owner_id\"], int), \"Team 'owner_id' is not an integer\"\n\n    except AssertionError as ae:\n        raise\n    except requests.RequestException as re:\n        raise RuntimeError(f\"Request failed: {re}\")\n\ntest_get_authenticated_users_team_details()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 51, in <module>\n  File \"<string>\", line 18, in test_get_authenticated_users_team_details\nAssertionError: Login failed: {\"error\":\"Server error\",\"details\":\"Cannot read properties of undefined (reading 'query')\"}\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-16T12:52:45.566Z",
    "modified": "2025-10-16T12:53:26.351Z"
  },
  {
    "projectId": "3b5100fd-536b-4d2f-a673-dae4ad815562",
    "testId": "a6413413-2baa-48a4-9f0b-9bc3677d0b0d",
    "userId": "542874f8-8051-709a-f7f2-d04f2d7e10a0",
    "title": "TC007-add new player to team with valid data",
    "description": "Test the /players/add POST endpoint to add a new player to the authenticated user's team with valid player name and role. Verify response status 201 and success message.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5000\"\nAUTH_ENDPOINT = \"/api/auth/login\"\nADD_PLAYER_ENDPOINT = \"/api/players/add\"\nMY_TEAM_ENDPOINT = \"/api/teams/my-team\"\nDELETE_PLAYER_ENDPOINT_TEMPLATE = \"/api/players/{player_id}/delete\"\nTIMEOUT = 30\nUSERNAME = \"1\"\nPASSWORD = \"1\"\n\ndef test_add_new_player_to_team_with_valid_data():\n    session = requests.Session()\n    try:\n        # Login to get JWT token\n        login_payload = {\n            \"phone_number\": USERNAME,\n            \"password\": PASSWORD\n        }\n        login_resp = session.post(f\"{BASE_URL}{AUTH_ENDPOINT}\", json=login_payload, timeout=TIMEOUT)\n        assert login_resp.status_code == 200, f\"Login failed: {login_resp.text}\"\n        login_data = login_resp.json()\n        token = login_data.get(\"token\")\n        assert token, \"No token received on login\"\n        headers = {\"Authorization\": f\"Bearer {token}\"}\n        \n        # Get authenticated user's team to confirm valid session (optional, but verify authentication)\n        team_resp = session.get(f\"{BASE_URL}{MY_TEAM_ENDPOINT}\", headers=headers, timeout=TIMEOUT)\n        assert team_resp.status_code == 200, f\"Fetching team failed: {team_resp.text}\"\n        team_data = team_resp.json()\n        assert \"id\" in team_data and \"team_name\" in team_data, \"Invalid team data returned\"\n        \n        # Add a new player with valid data\n        player_payload = {\n            \"player_name\": \"Test Player TC007\",\n            \"player_role\": \"batsman\"\n        }\n        add_player_resp = session.post(f\"{BASE_URL}{ADD_PLAYER_ENDPOINT}\", json=player_payload, headers=headers, timeout=TIMEOUT)\n        assert add_player_resp.status_code == 201, f\"Add player failed: {add_player_resp.text}\"\n        add_player_data = add_player_resp.json()\n        assert add_player_data.get(\"message\") == \"Player added successfully\", \"Unexpected success message\"\n        \n        # The response schema does not specify returning player id, so we must get it by listing players or assume no delete endpoint provided so cleanup not implemented\n        \n    finally:\n        # No explicit player delete endpoint described in PRD or test instructions\n        pass\n\ntest_add_new_player_to_team_with_valid_data()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 49, in <module>\n  File \"<string>\", line 21, in test_add_new_player_to_team_with_valid_data\nAssertionError: Login failed: {\"error\":\"Server error\",\"details\":\"Cannot read properties of undefined (reading 'query')\"}\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-16T12:52:45.570Z",
    "modified": "2025-10-16T12:53:30.110Z"
  },
  {
    "projectId": "3b5100fd-536b-4d2f-a673-dae4ad815562",
    "testId": "fdc46ff9-fb4b-442a-a160-ae005818c96a",
    "userId": "542874f8-8051-709a-f7f2-d04f2d7e10a0",
    "title": "TC008-create new tournament with required fields",
    "description": "Test the /tournaments/create POST endpoint to create a new tournament with valid tournament name, location, and start date. Verify response status 201 and success message with tournament id.",
    "code": "import requests\nfrom requests.auth import HTTPBasicAuth\n\nBASE_URL = \"http://localhost:5000\"\nREGISTER_URL = f\"{BASE_URL}/api/auth/register\"\nLOGIN_URL = f\"{BASE_URL}/api/auth/login\"\nTOURNAMENT_CREATE_URL = f\"{BASE_URL}/api/tournaments/create\"\nTOURNAMENT_DELETE_URL = f\"{BASE_URL}/api/tournaments/\"  # Assuming DELETE /api/tournaments/{id} exists for cleanup\n\nUSERNAME = \"1\"\nPASSWORD = \"1\"\nAUTH = HTTPBasicAuth(USERNAME, PASSWORD)\nTIMEOUT = 30\n\n\ndef test_create_new_tournament_with_required_fields():\n    # Step 1: Login to get JWT token\n    login_payload = {\n        \"phone_number\": USERNAME,\n        \"password\": PASSWORD\n    }\n    try:\n        login_resp = requests.post(LOGIN_URL, json=login_payload, timeout=TIMEOUT)\n        assert login_resp.status_code == 200, f\"Login failed with status {login_resp.status_code}\"\n        login_data = login_resp.json()\n        token = login_data.get(\"token\")\n        assert token, \"Token missing in login response\"\n    except Exception as e:\n        raise AssertionError(f\"Authentication failed: {e}\")\n\n    headers = {\n        \"Authorization\": f\"Bearer {token}\",\n        \"Content-Type\": \"application/json\"\n    }\n\n    # Create a new tournament with required fields\n    tournament_payload = {\n        \"tournament_name\": \"Test Tournament TC008\",\n        \"location\": \"Test Location\",\n        \"start_date\": \"2025-12-01\"\n    }\n\n    tournament_id = None\n    try:\n        create_resp = requests.post(TOURNAMENT_CREATE_URL, json=tournament_payload, headers=headers, timeout=TIMEOUT)\n        assert create_resp.status_code == 201, f\"Tournament creation failed with status {create_resp.status_code}\"\n        create_data = create_resp.json()\n        assert create_data.get(\"message\") == \"Tournament created successfully\", \"Unexpected success message\"\n        tournament_id = create_data.get(\"id\")\n        assert isinstance(tournament_id, int) and tournament_id > 0, \"Invalid tournament id returned\"\n    finally:\n        # Cleanup: delete the created tournament if created\n        if tournament_id is not None:\n            try:\n                delete_resp = requests.delete(f\"{TOURNAMENT_DELETE_URL}{tournament_id}\", headers=headers, timeout=TIMEOUT)\n                if delete_resp.status_code not in (200, 204):\n                    print(f\"Warning: Failed to delete tournament id {tournament_id} during cleanup.\")\n            except Exception as cleanup_exc:\n                print(f\"Warning: Exception during cleanup deleting tournament id {tournament_id}: {cleanup_exc}\")\n\n\ntest_create_new_tournament_with_required_fields()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 24, in test_create_new_tournament_with_required_fields\nAssertionError: Login failed with status 500\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 62, in <module>\n  File \"<string>\", line 29, in test_create_new_tournament_with_required_fields\nAssertionError: Authentication failed: Login failed with status 500\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-16T12:52:45.575Z",
    "modified": "2025-10-16T12:53:33.708Z"
  },
  {
    "projectId": "3b5100fd-536b-4d2f-a673-dae4ad815562",
    "testId": "8d75cfe4-52ef-4c2b-9216-a3fcb82ed20c",
    "userId": "542874f8-8051-709a-f7f2-d04f2d7e10a0",
    "title": "TC009-get list of all tournaments",
    "description": "Test the /tournaments/ GET endpoint to retrieve a list of all tournaments. Verify response status 200 and correct structure of tournament list including id, name, location, start date, and status.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5000/api\"\nAUTH_CREDENTIALS = (\"1\", \"1\")\nTIMEOUT = 30\n\ndef test_get_list_of_all_tournaments():\n    # First, perform basic health check to ensure system status before main test\n    try:\n        health_resp = requests.get(f\"http://localhost:5000/health\", timeout=TIMEOUT)\n        assert health_resp.status_code == 200\n        health_data = health_resp.json()\n        assert health_data.get(\"status\") == \"ok\"\n        assert health_data.get(\"db\") in (\"up\", \"down\")\n    except Exception as e:\n        raise AssertionError(f\"Health check failed: {e}\")\n\n    # Authenticate using phone_number and password to get JWT token\n    login_url = f\"http://localhost:5000/api/auth/login\"\n    login_payload = {\n        \"phone_number\": AUTH_CREDENTIALS[0],\n        \"password\": AUTH_CREDENTIALS[1]\n    }\n    try:\n        login_resp = requests.post(login_url, json=login_payload, timeout=TIMEOUT)\n        assert login_resp.status_code == 200, f\"Login failed with status {login_resp.status_code}\"\n        login_data = login_resp.json()\n        token = login_data.get(\"token\")\n        assert token and isinstance(token, str) and token.strip() != \"\"\n    except Exception as e:\n        raise AssertionError(f\"Authentication failed: {e}\")\n\n    headers = {\n        \"Authorization\": f\"Bearer {token}\"\n    }\n\n    # Call the /tournaments/ GET endpoint to fetch all tournaments\n    tournaments_url = f\"{BASE_URL}/tournaments/\"\n    try:\n        resp = requests.get(tournaments_url, headers=headers, timeout=TIMEOUT)\n    except Exception as e:\n        raise AssertionError(f\"Request to {tournaments_url} failed: {e}\")\n\n    assert resp.status_code == 200, f\"Expected 200 OK but got {resp.status_code}\"\n\n    try:\n        tournaments = resp.json()\n    except Exception as e:\n        raise AssertionError(\"Response is not valid JSON\")\n\n    assert isinstance(tournaments, list), \"Response is not a list\"\n\n    # Validate each tournament object for required fields and types\n    allowed_statuses = {\"not_started\", \"live\", \"completed\", \"abandoned\"}\n    for tournament in tournaments:\n        assert isinstance(tournament, dict), \"Tournament item is not an object\"\n        # id\n        assert \"id\" in tournament, \"Tournament missing 'id'\"\n        assert isinstance(tournament[\"id\"], int), \"'id' is not int\"\n        # tournament_name\n        assert \"tournament_name\" in tournament, \"Tournament missing 'tournament_name'\"\n        assert isinstance(tournament[\"tournament_name\"], str), \"'tournament_name' is not string\"\n        # location\n        assert \"location\" in tournament, \"Tournament missing 'location'\"\n        assert isinstance(tournament[\"location\"], str), \"'location' is not string\"\n        # start_date\n        assert \"start_date\" in tournament, \"Tournament missing 'start_date'\"\n        assert isinstance(tournament[\"start_date\"], str), \"'start_date' is not string\"\n        # status\n        assert \"status\" in tournament, \"Tournament missing 'status'\"\n        assert tournament[\"status\"] in allowed_statuses, \"'status' has invalid value\"\n\n    print(\"TC009 passed: Retrieved list of tournaments with correct structure and status 200\")\n\ntest_get_list_of_all_tournaments()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 26, in test_get_list_of_all_tournaments\nAssertionError: Login failed with status 500\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 75, in <module>\n  File \"<string>\", line 31, in test_get_list_of_all_tournaments\nAssertionError: Authentication failed: Login failed with status 500\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-16T12:52:45.580Z",
    "modified": "2025-10-16T12:53:52.007Z"
  },
  {
    "projectId": "3b5100fd-536b-4d2f-a673-dae4ad815562",
    "testId": "9506bbd5-f22f-4722-8376-9bce1d86eab2",
    "userId": "542874f8-8051-709a-f7f2-d04f2d7e10a0",
    "title": "TC010-start new innings for a match",
    "description": "Test the /live/start-innings POST endpoint to start a new innings for a match with valid match id, batting team id, bowling team id, and overs. Verify response status 201 and success message with innings id.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5000\"\nAUTH_URL = f\"{BASE_URL}/api/auth/login\"\nSTART_INNINGS_URL = f\"{BASE_URL}/api/live/start-innings\"\nTEAMS_ALL_URL = f\"{BASE_URL}/api/teams/all\"\nTOURNAMENTS_URL = f\"{BASE_URL}/api/tournaments/\"\n\nTIMEOUT = 30\n\ndef test_start_new_innings_for_match():\n    # Step 1: Login to get JWT token\n    login_payload = {\n        \"phone_number\": \"1\",\n        \"password\": \"1\"\n    }\n    login_response = requests.post(AUTH_URL, json=login_payload, timeout=TIMEOUT)\n    assert login_response.status_code == 200, f\"Login failed: {login_response.text}\"\n    login_data = login_response.json()\n    token = login_data.get(\"token\")\n    assert token and isinstance(token, str), \"JWT token not found in login response\"\n\n    headers = {\n        \"Authorization\": f\"Bearer {token}\",\n        \"Content-Type\": \"application/json\"\n    }\n\n    # Fetch all teams to get batting_team_id and bowling_team_id\n    teams_response = requests.get(TEAMS_ALL_URL, timeout=TIMEOUT)\n    assert teams_response.status_code == 200, f\"Failed to get teams: {teams_response.text}\"\n    teams = teams_response.json()\n    assert isinstance(teams, list) and len(teams) >= 2, \"Need at least two teams to run this test\"\n    batting_team_id = teams[0][\"id\"]\n    bowling_team_id = teams[1][\"id\"]\n\n    # To get a match_id, try to get tournaments and assume first tournament id\n    tournaments_response = requests.get(TOURNAMENTS_URL, timeout=TIMEOUT)\n    assert tournaments_response.status_code == 200, f\"Failed to get tournaments: {tournaments_response.text}\"\n    tournaments = tournaments_response.json()\n    assert isinstance(tournaments, list) and len(tournaments) >= 1, \"At least one tournament required\"\n    match_id = tournaments[0][\"id\"]\n\n    # Prepare payload for starting innings\n    innings_payload = {\n        \"match_id\": match_id,\n        \"batting_team_id\": batting_team_id,\n        \"bowling_team_id\": bowling_team_id,\n        \"overs\": 5\n    }\n\n    # POST to start innings\n    start_innings_response = requests.post(START_INNINGS_URL, headers=headers, json=innings_payload, timeout=TIMEOUT)\n    assert start_innings_response.status_code == 201, f\"Failed to start innings: {start_innings_response.text}\"\n    response_data = start_innings_response.json()\n    assert response_data.get(\"message\") == \"Innings started successfully\", \"Success message mismatch\"\n    innings_id = response_data.get(\"innings_id\")\n    assert innings_id and isinstance(innings_id, int), \"Innings ID missing or invalid\"\n\n\ntest_start_new_innings_for_match()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 60, in <module>\n  File \"<string>\", line 18, in test_start_new_innings_for_match\nAssertionError: Login failed: Too many requests, please try again later.\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-16T12:52:45.585Z",
    "modified": "2025-10-16T12:53:51.606Z"
  }
]
