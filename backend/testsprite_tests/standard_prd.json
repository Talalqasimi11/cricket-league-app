{
  "meta": {
    "project": "Cricket League Management Application",
    "date": "2025-10-15",
    "prepared_by": "Generated by Software Development Manager"
  },
  "product_overview": "A comprehensive digital platform enabling cricket team captains and tournament organizers to manage teams, tournaments, live scoring, and player statistics in real-time through an intuitive mobile-first experience.",
  "core_goals": [
    "Digitize the entire cricket tournament lifecycle from team registration to match completion",
    "Enable real-time ball-by-ball match scoring accessible to players and spectators",
    "Automatically calculate and provide detailed player and team statistics",
    "Facilitate easy team and player management for captains",
    "Provide robust and secure user authentication and account management",
    "Support creation, management, and scheduling of tournaments and matches",
    "Offer feedback system with content moderation to enhance user experience"
  ],
  "key_features": [
    "User registration with unique phone number verification and automatic team creation",
    "Secure login with JWT access and refresh tokens and progressive throttling on failed attempts",
    "Token refresh and rotation for secure session management",
    "Password reset flow with token verification and expiration",
    "Team management with public and owner-authenticated endpoints",
    "Player management allowing captains to add, update, and delete players",
    "Tournament management including creation, listing, updating, and deleting tournaments",
    "Tournament team management supporting addition of registered and temporary teams before tournament start",
    "Match management to create, list, and update match statuses",
    "Live scoring with ball-by-ball delivery recording, innings management, and real-time statistics updates",
    "Match finalization determining winner and updating team stats",
    "Complete match scorecards and player statistics by match and tournament",
    "Feedback submission with profanity filtering and length validation",
    "Health check endpoint for API and database status"
  ],
  "user_flow_summary": [
    "User registers via phone number and password, automatically creating a team and becoming captain",
    "User logs in and receives JWT tokens for authenticated access",
    "User can reset password through a multi-step token-based process",
    "Captains manage their team and players via authenticated endpoints",
    "User creates and manages tournaments and adds teams to tournaments before they start",
    "Matches are scheduled within tournaments by authorized users",
    "During live matches, authorized captains record ball-by-ball scoring updating runs, wickets, and overs",
    "Innings can be ended manually by captains or automatically when conditions are met",
    "Matches are finalized by captains determining the winner and updating statistics",
    "Users and spectators access public data such as teams, tournaments, matches, live scores, and scorecards",
    "Users can submit feedback with content moderation to improve the product"
  ],
  "validation_criteria": [
    "Successful registration requires unique phone number in E.164 format and password of at least 8 characters",
    "Login enforces progressive throttling and rate limiting",
    "Refresh tokens validated against revocation list and expiration",
    "Password reset tokens expire after 15 minutes and enforce single active token policy",
    "Team and player management endpoints confirm user ownership and authentication",
    "Tournament creation, updates, and deletions restricted to creators",
    "Teams can only be added to tournaments before they start and duplicates are prevented",
    "Match statuses transition only via authorized users and valid sequences",
    "Live scoring reflects accurate ball delivery data and auto-updates statistics",
    "Match finalization requires all innings complete and authorized captain",
    "Feedback content is checked for profanity, length, and normalized whitespace",
    "API performance meets target response times under specified load"
  ],
  "code_summary": {
    "tech_stack": [
      "Node.js >= 18.18.0",
      "Express.js 5.1.0",
      "MySQL (mysql2 3.15.0)",
      "JWT (jsonwebtoken 9.0.2)",
      "bcryptjs 2.4.3",
      "pino-http 10.3.0",
      "express-rate-limit 7.4.0",
      "cookie-parser 1.4.7",
      "cors 2.8.5"
    ],
    "features": [
      {
        "name": "User Registration",
        "description": "Register new cricket team captain with phone number, password, and team details. Creates both user account and team in one transaction.",
        "files": [
          "controllers/authController.js",
          "routes/authRoutes.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/auth/register": {
              "post": {
                "summary": "Register new captain",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "phone_number",
                          "password",
                          "team_name",
                          "team_location"
                        ],
                        "properties": {
                          "phone_number": {
                            "type": "string",
                            "pattern": "^\\+?[1-9]\\d{7,14}$"
                          },
                          "password": {
                            "type": "string",
                            "minLength": 8
                          },
                          "team_name": {
                            "type": "string"
                          },
                          "team_location": {
                            "type": "string"
                          },
                          "captain_name": {
                            "type": "string"
                          },
                          "owner_name": {
                            "type": "string"
                          },
                          "team_logo_url": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "201": {
                    "description": "Registration successful"
                  },
                  "400": {
                    "description": "Validation error"
                  },
                  "409": {
                    "description": "Phone number already registered"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "User Login",
        "description": "Authenticate captain with phone number and password. Returns access token (15min) and refresh token (7 days). Implements progressive throttling on failed attempts.",
        "files": [
          "controllers/authController.js",
          "routes/authRoutes.js",
          "middleware/authMiddleware.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/auth/login": {
              "post": {
                "summary": "Login captain",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "phone_number",
                          "password"
                        ],
                        "properties": {
                          "phone_number": {
                            "type": "string"
                          },
                          "password": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Login successful",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "message": {
                              "type": "string"
                            },
                            "token": {
                              "type": "string"
                            },
                            "refresh_token": {
                              "type": "string"
                            },
                            "user": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "integer"
                                },
                                "phone_number": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "401": {
                    "description": "Invalid credentials"
                  },
                  "404": {
                    "description": "User not found"
                  },
                  "429": {
                    "description": "Too many failed attempts"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Token Refresh",
        "description": "Refresh expired access token using valid refresh token. Supports token rotation.",
        "files": [
          "controllers/authController.js",
          "routes/authRoutes.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/auth/refresh": {
              "post": {
                "summary": "Refresh access token",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "refresh_token": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Token refreshed",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "token": {
                              "type": "string"
                            },
                            "refresh_token": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "401": {
                    "description": "Invalid or expired refresh token"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "User Logout",
        "description": "Revoke refresh tokens and clear cookies",
        "files": [
          "controllers/authController.js",
          "routes/authRoutes.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/auth/logout": {
              "post": {
                "summary": "Logout user",
                "responses": {
                  "200": {
                    "description": "Logged out successfully"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Password Reset",
        "description": "Three-step password reset flow: request token, verify token, confirm new password",
        "files": [
          "controllers/authController.js",
          "routes/authRoutes.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/auth/forgot-password": {
              "post": {
                "summary": "Request password reset",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "phone_number"
                        ],
                        "properties": {
                          "phone_number": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/api/auth/verify-reset": {
              "post": {
                "summary": "Verify reset token"
              }
            },
            "/api/auth/reset-password": {
              "post": {
                "summary": "Complete password reset"
              }
            }
          }
        }
      },
      {
        "name": "Team Management",
        "description": "View all teams (public) and manage own team (authenticated)",
        "files": [
          "controllers/teamController.js",
          "routes/teamRoutes.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/teams/all": {
              "get": {
                "summary": "Get all teams (public)",
                "responses": {
                  "200": {
                    "description": "List of teams"
                  }
                }
              }
            },
            "/api/teams/my-team": {
              "get": {
                "summary": "Get authenticated user's team",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Team details"
                  },
                  "401": {
                    "description": "Unauthorized"
                  },
                  "404": {
                    "description": "No team found"
                  }
                }
              }
            },
            "/api/teams/update": {
              "put": {
                "summary": "Update team details",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ]
              }
            }
          }
        }
      },
      {
        "name": "Player Management",
        "description": "Add, update, delete players in captain's team. View players by team (public).",
        "files": [
          "controllers/playerController.js",
          "routes/playerRoutes.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/players/add": {
              "post": {
                "summary": "Add player to team",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "player_name",
                          "player_role"
                        ],
                        "properties": {
                          "player_name": {
                            "type": "string"
                          },
                          "player_role": {
                            "type": "string",
                            "enum": [
                              "Batsman",
                              "Bowler",
                              "All-rounder",
                              "Wicket-keeper"
                            ]
                          },
                          "player_image_url": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "201": {
                    "description": "Player created"
                  },
                  "400": {
                    "description": "Invalid role"
                  },
                  "404": {
                    "description": "No team found"
                  }
                }
              }
            },
            "/api/players/by-team/:team_id": {
              "get": {
                "summary": "Get players by team ID (public)"
              }
            }
          }
        }
      },
      {
        "name": "Tournament Management",
        "description": "Create, update, delete, and list tournaments",
        "files": [
          "controllers/tournamentController.js",
          "routes/tournamentRoutes.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/tournaments/create": {
              "post": {
                "summary": "Create tournament",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "tournament_name",
                          "start_date",
                          "location"
                        ],
                        "properties": {
                          "tournament_name": {
                            "type": "string"
                          },
                          "start_date": {
                            "type": "string",
                            "format": "date"
                          },
                          "location": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/api/tournaments/": {
              "get": {
                "summary": "Get all tournaments (public)"
              }
            }
          }
        }
      },
      {
        "name": "Tournament Team Management",
        "description": "Add registered or temporary teams to tournaments. Only allowed before tournament starts.",
        "files": [
          "controllers/tournamentTeamController.js",
          "routes/tournamentTeamRoutes.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/tournament-teams/add": {
              "post": {
                "summary": "Add team to tournament",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "tournament_id"
                        ],
                        "properties": {
                          "tournament_id": {
                            "type": "integer"
                          },
                          "team_id": {
                            "type": "integer"
                          },
                          "temp_team_name": {
                            "type": "string"
                          },
                          "temp_team_location": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/api/tournament-teams/:tournament_id": {
              "get": {
                "summary": "Get tournament teams (public)"
              }
            }
          }
        }
      },
      {
        "name": "Tournament Match Management",
        "description": "Create, update, start, end tournament matches. Supports manual and auto fixture generation.",
        "files": [
          "controllers/tournamentMatchController.js",
          "routes/tournamentMatchRoutes.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/tournament-matches/create": {
              "post": {
                "summary": "Create tournament matches",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "tournament_id",
                          "mode"
                        ],
                        "properties": {
                          "tournament_id": {
                            "type": "integer"
                          },
                          "mode": {
                            "type": "string",
                            "enum": [
                              "manual",
                              "auto"
                            ]
                          },
                          "matches": {
                            "type": "array"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/api/tournament-matches/:tournament_id": {
              "get": {
                "summary": "Get tournament matches (public)"
              }
            }
          }
        }
      },
      {
        "name": "Live Scoring",
        "description": "Start innings, record ball-by-ball deliveries, end innings, auto-calculate stats",
        "files": [
          "controllers/liveScoreController.js",
          "controllers/BallByBallController.js",
          "routes/liveScoreRoutes.js",
          "routes/ballByBallRoutes.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/live/start-innings": {
              "post": {
                "summary": "Start new innings",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "match_id",
                          "batting_team_id",
                          "bowling_team_id",
                          "inning_number"
                        ],
                        "properties": {
                          "match_id": {
                            "type": "integer"
                          },
                          "batting_team_id": {
                            "type": "integer"
                          },
                          "bowling_team_id": {
                            "type": "integer"
                          },
                          "inning_number": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/api/live/ball": {
              "post": {
                "summary": "Record ball delivery",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "description": "Auto-updates innings totals and player stats. Auto-ends innings on 10 wickets or overs complete."
              }
            },
            "/api/live/:match_id": {
              "get": {
                "summary": "Get live score (public)"
              }
            }
          }
        }
      },
      {
        "name": "Match Finalization",
        "description": "Finalize completed matches, determine winner, update team and player statistics",
        "files": [
          "controllers/matchFinalizationController.js",
          "routes/matchFinalizationRoutes.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/match-finalization/finalize": {
              "post": {
                "summary": "Finalize match",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "match_id"
                        ],
                        "properties": {
                          "match_id": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Scorecards",
        "description": "View complete match scorecards with batting and bowling statistics",
        "files": [
          "controllers/scorecardController.js",
          "routes/scorecardRoutes.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/viewer/scorecard/:match_id": {
              "get": {
                "summary": "Get match scorecard (public)",
                "parameters": [
                  {
                    "name": "match_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "integer"
                    }
                  }
                ]
              }
            }
          }
        }
      },
      {
        "name": "Player Statistics",
        "description": "Get player stats by match, tournament, or view leaderboards (top run scorers, wicket takers)",
        "files": [
          "controllers/playerStatsController.js",
          "controllers/playerMatchStatsController.js",
          "routes/playerStatsRoutes.js",
          "routes/playerMatchStatsRoutes.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/player-stats/:tournament_id/top-runs": {
              "get": {
                "summary": "Get top run scorers (public)"
              }
            },
            "/api/player-stats/:tournament_id/top-wickets": {
              "get": {
                "summary": "Get top wicket takers (public)"
              }
            },
            "/api/player-match-stats/match/:match_id": {
              "get": {
                "summary": "Get player stats by match (public)"
              }
            },
            "/api/player-match-stats/tournament/:tournament_id": {
              "get": {
                "summary": "Get aggregated player stats by tournament (public)"
              }
            }
          }
        }
      },
      {
        "name": "Feedback System",
        "description": "Submit feedback with profanity filtering and length validation",
        "files": [
          "controllers/feedbackController.js",
          "routes/feedbackRoutes.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/feedback": {
              "post": {
                "summary": "Submit feedback (optional auth)",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "message"
                        ],
                        "properties": {
                          "message": {
                            "type": "string",
                            "minLength": 5,
                            "maxLength": 2000
                          },
                          "contact": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "201": {
                    "description": "Feedback received"
                  },
                  "400": {
                    "description": "Validation error or inappropriate content"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Health Check",
        "description": "API health check with database connectivity status",
        "files": [
          "index.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/health": {
              "get": {
                "summary": "Health check",
                "responses": {
                  "200": {
                    "description": "Server health status",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            },
                            "version": {
                              "type": "string"
                            },
                            "db": {
                              "type": "string",
                              "enum": [
                                "up",
                                "down"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    ]
  }
}
